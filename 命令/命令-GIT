------------------------------------------------------------------------------------------------------------------------
GIT http://blog.csdn.net/arkblue/article/details/9568249/
GIT
-------------------------------基本操作----------------------------------------------------------------------------------
$ git add .                  // 注意别少了后面这个点["."]
$ git status                 //查看状态
$ git log
$ git clone




------------------------------项目操作 [提交| 下载\合并\推送]-----------------------------------------------------------------------------------
GIT-[提交|下载|合并|推送](没有涉及到分支版本)

    Administrator@ThinkPad-W530 MINGW64 /z/IdeaProjects/SVN/spring_2017/zlcore (master)

    $ git commit -am"新增:Activity"
    $ git fetch zlcore master:temp  --输入用户名密码
    $ git rebase temp
    $ git push ---输入用户名密码
-------------------------------------------------------------------------------------------------------------------------
字面解释的话，
git commit -m用于提交暂存区的文件；
git commit -am用于提交跟踪过的文件

要理解它们的区别，
首先要明白git的文件状态变化周期，如下图所示

工作目录下面的所有文件都不外乎这两种状态：
已跟踪或未跟踪。已跟踪的文件是指本来就被纳入版本控制管理的文件，
在上次快照中有它们的记录，工作一段时间后，
它们的状态可能是未更新，已修改或者已放入暂存区
------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ 分支操作[]
-----------------------------------------------------------------------------------------------------------------
$ git branch                            //查看(本地分支)
$ git branch -a                         //查看(本地分支+远程分支)
$ git remote -v                         //查看远程的git地址个别名

注意:先提交本地更改
--创建远程分支
$ git branch test                       //创建 [ add -A | commit  | git branch test]
$ git push origin test                  //推送到远程

--------------------------------
$ git branch -D xxxxx                   //删除本地分支【参数要大写 -D 】

$ git branch -r -D origin/branch-name   //1.删除远程分支
$ git push origin :branch-name          //2.推到远程【必须推送到远程才能 更新 全远程分支信息】


-----------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ 项目操作[]
-----------------------------------------------------------------------------------------------------------------
*》注意:先提交本地更改


-----------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ 项目操作[切换版本>操作顺序]
-----------------------------------------------------------------------------------------------------------------

1》前必须先提交本地更改【】
Administrator@ThinkPad-W530 MINGW64 /z/IdeaProjects/GIT/zlcore (master)
$ git commit -am"切换版本前提交本地更改"

2》
Administrator@ThinkPad-W530 MINGW64 /z/IdeaProjects/GIT/zlcore (master)
$ git checkout -b 2.0.0 origin/2.0.0

Checking out files: 100% (667/667), done.
Switched to a new branch '2.0.0'
Branch 2.0.0 set up to track remote branch 2.0.0 from origin.

3》
Administrator@ThinkPad-W530 MINGW64 /z/IdeaProjects/GIT/zlcore (2.0.0)
$ git remote -v

origin  https://git.oschina.net/mfdyyge-zl/zlcore.git (fetch)
origin  https://git.oschina.net/mfdyyge-zl/zlcore.git (push)

4》
Administrator@ThinkPad-W530 MINGW64 /z/IdeaProjects/GIT/zlcore (2.0.0)
$ git branch -a

* 2.0.0
  master
  remotes/origin/1.0.0.20170808
  remotes/origin/2.0.0
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
----------------------------------------------------------------------切换版本-end






