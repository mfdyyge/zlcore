<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">
	<!-- Spring核心 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	<!-- 编码处理 -->
	<dbtools.query.filter>
		<dbtools.query.filter-name>encodingFilter</dbtools.query.filter-name>
		<dbtools.query.filter-class>org.springframework.web.dbtools.query.filter.CharacterEncodingFilter</dbtools.query.filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</dbtools.query.filter>
	<dbtools.query.filter-mapping>
		<dbtools.query.filter-name>encodingFilter</dbtools.query.filter-name>
		<url-pattern>/*</url-pattern>
	</dbtools.query.filter-mapping>
	<!-- 由Spring借助Redis接管HttpSession，实现分布式共享Session
	<dbtools.query.filter>
		<dbtools.query.filter-name>springSessionRepositoryFilter</dbtools.query.filter-name>
		<dbtools.query.filter-class>org.springframework.web.dbtools.query.filter.DelegatingFilterProxy</dbtools.query.filter-class>
	</dbtools.query.filter>
	<dbtools.query.filter-mapping>
		<dbtools.query.filter-name>springSessionRepositoryFilter</dbtools.query.filter-name>
		<url-pattern>/*</url-pattern>
	</dbtools.query.filter-mapping>
	 -->
	<!-- 验证码 -->
	<dbtools.query.filter>
		<dbtools.query.filter-name>captchaFilter</dbtools.query.filter-name>
		<dbtools.query.filter-class>com.zl.core.springmvc.captcha.CaptchaFilter</dbtools.query.filter-class>
	</dbtools.query.filter>
	<dbtools.query.filter-mapping>
		<dbtools.query.filter-name>captchaFilter</dbtools.query.filter-name>
		<url-pattern>/captcha</url-pattern>
	</dbtools.query.filter-mapping>
	<!-- 单点登录 -->
	<dbtools.query.filter>
		<dbtools.query.filter-name>ssoFilter</dbtools.query.filter-name>
		<dbtools.query.filter-class>smart.sso.client.SsoFilter</dbtools.query.filter-class>
		<init-param>
			<param-name>excludes</param-name>
			<param-value>/login,/logout,/rpc,/swagger-ui.html,/webjars/**,/swagger-resources/**,/v2/api-docs</param-value>
		</init-param>
	</dbtools.query.filter>
	<dbtools.query.filter-mapping>
		<dbtools.query.filter-name>ssoFilter</dbtools.query.filter-name>
		<url-pattern>/*</url-pattern>
	</dbtools.query.filter-mapping>
	<!-- 权限控制(选配) -->
	<dbtools.query.filter>
		<dbtools.query.filter-name>permissionFilter</dbtools.query.filter-name>
		<dbtools.query.filter-class>smart.sso.client.PermissionFilter</dbtools.query.filter-class>
		<init-param>
			<param-name>excludes</param-name>
			<param-value>/login,/logout,/rpc,/swagger-ui.html,/webjars/**,/swagger-resources/**,/v2/api-docs</param-value>
		</init-param>
	</dbtools.query.filter>
	<dbtools.query.filter-mapping>
		<dbtools.query.filter-name>permissionFilter</dbtools.query.filter-name>
		<url-pattern>/*</url-pattern>
	</dbtools.query.filter-mapping>
	<!-- SpringMVC核心 -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:applicationContext-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- 身份认证授权RPC服务 -->
	<servlet>
		<servlet-name>rpc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:applicationContext-rpc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>rpc</servlet-name>
		<url-pattern>/rpc/*</url-pattern>
	</servlet-mapping>
	<!-- 应用初始化参数 -->
	<servlet>
		<servlet-name>configServlet</servlet-name>
		<servlet-class>smart.sso.server.common.ConfigServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
</web-app>